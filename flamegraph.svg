<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="374" onload="init(evt)" viewBox="0 0 1200 374" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="374" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="357.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="357.00"> </text><svg id="frames" x="10" width="1180" total_samples="4347"><g><title>libsystem_malloc.dylib`_free (2 samples, 0.05%)</title><rect x="0.0000%" y="213" width="0.0460%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="2"/><text x="0.2500%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.02%)</title><rect x="0.0460%" y="213" width="0.0230%" height="15" fill="rgb(217,0,24)" fg:x="2" fg:w="1"/><text x="0.2960%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.02%)</title><rect x="0.0460%" y="197" width="0.0230%" height="15" fill="rgb(221,193,54)" fg:x="2" fg:w="1"/><text x="0.2960%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.02%)</title><rect x="0.0460%" y="181" width="0.0230%" height="15" fill="rgb(248,212,6)" fg:x="2" fg:w="1"/><text x="0.2960%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (4 samples, 0.09%)</title><rect x="0.0920%" y="197" width="0.0920%" height="15" fill="rgb(208,68,35)" fg:x="4" fg:w="4"/><text x="0.3420%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (1 samples, 0.02%)</title><rect x="0.1840%" y="197" width="0.0230%" height="15" fill="rgb(232,128,0)" fg:x="8" fg:w="1"/><text x="0.4340%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block_locked (1 samples, 0.02%)</title><rect x="0.1840%" y="181" width="0.0230%" height="15" fill="rgb(207,160,47)" fg:x="8" fg:w="1"/><text x="0.4340%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.02%)</title><rect x="0.1840%" y="165" width="0.0230%" height="15" fill="rgb(228,23,34)" fg:x="8" fg:w="1"/><text x="0.4340%" y="175.50"></text></g><g><title>rust_ruleengine`DYLD-STUB$$free (1 samples, 0.02%)</title><rect x="0.2070%" y="197" width="0.0230%" height="15" fill="rgb(218,30,26)" fg:x="9" fg:w="1"/><text x="0.4570%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_plat (1 samples, 0.02%)</title><rect x="0.2530%" y="149" width="0.0230%" height="15" fill="rgb(220,122,19)" fg:x="11" fg:w="1"/><text x="0.5030%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (1 samples, 0.02%)</title><rect x="0.2530%" y="133" width="0.0230%" height="15" fill="rgb(250,228,42)" fg:x="11" fg:w="1"/><text x="0.5030%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_scan_madvise_free (1 samples, 0.02%)</title><rect x="0.2761%" y="149" width="0.0230%" height="15" fill="rgb(240,193,28)" fg:x="12" fg:w="1"/><text x="0.5261%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.02%)</title><rect x="0.2761%" y="133" width="0.0230%" height="15" fill="rgb(216,20,37)" fg:x="12" fg:w="1"/><text x="0.5261%" y="143.50"></text></g><g><title>rust_ruleengine`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (4 samples, 0.09%)</title><rect x="0.2300%" y="197" width="0.0920%" height="15" fill="rgb(206,188,39)" fg:x="10" fg:w="4"/><text x="0.4800%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (4 samples, 0.09%)</title><rect x="0.2300%" y="181" width="0.0920%" height="15" fill="rgb(217,207,13)" fg:x="10" fg:w="4"/><text x="0.4800%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (4 samples, 0.09%)</title><rect x="0.2300%" y="165" width="0.0920%" height="15" fill="rgb(231,73,38)" fg:x="10" fg:w="4"/><text x="0.4800%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_madvise_free_range_no_lock (1 samples, 0.02%)</title><rect x="0.2991%" y="149" width="0.0230%" height="15" fill="rgb(225,20,46)" fg:x="13" fg:w="1"/><text x="0.5491%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.02%)</title><rect x="0.2991%" y="133" width="0.0230%" height="15" fill="rgb(210,31,41)" fg:x="13" fg:w="1"/><text x="0.5491%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_free (3 samples, 0.07%)</title><rect x="0.3221%" y="181" width="0.0690%" height="15" fill="rgb(221,200,47)" fg:x="14" fg:w="3"/><text x="0.5721%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.05%)</title><rect x="0.3911%" y="181" width="0.0460%" height="15" fill="rgb(226,26,5)" fg:x="17" fg:w="2"/><text x="0.6411%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (1 samples, 0.02%)</title><rect x="0.4371%" y="181" width="0.0230%" height="15" fill="rgb(249,33,26)" fg:x="19" fg:w="1"/><text x="0.6871%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block_locked (1 samples, 0.02%)</title><rect x="0.4371%" y="165" width="0.0230%" height="15" fill="rgb(235,183,28)" fg:x="19" fg:w="1"/><text x="0.6871%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.02%)</title><rect x="0.4371%" y="149" width="0.0230%" height="15" fill="rgb(221,5,38)" fg:x="19" fg:w="1"/><text x="0.6871%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_free (1 samples, 0.02%)</title><rect x="0.4831%" y="165" width="0.0230%" height="15" fill="rgb(247,18,42)" fg:x="21" fg:w="1"/><text x="0.7331%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (7 samples, 0.16%)</title><rect x="0.5061%" y="165" width="0.1610%" height="15" fill="rgb(241,131,45)" fg:x="22" fg:w="7"/><text x="0.7561%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (2 samples, 0.05%)</title><rect x="0.6671%" y="165" width="0.0460%" height="15" fill="rgb(249,31,29)" fg:x="29" fg:w="2"/><text x="0.9171%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block_locked (2 samples, 0.05%)</title><rect x="0.6671%" y="149" width="0.0460%" height="15" fill="rgb(225,111,53)" fg:x="29" fg:w="2"/><text x="0.9171%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`madvise (2 samples, 0.05%)</title><rect x="0.6671%" y="133" width="0.0460%" height="15" fill="rgb(238,160,17)" fg:x="29" fg:w="2"/><text x="0.9171%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.02%)</title><rect x="0.7131%" y="165" width="0.0230%" height="15" fill="rgb(214,148,48)" fg:x="31" fg:w="1"/><text x="0.9631%" y="175.50"></text></g><g><title>rust_ruleengine`core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (36 samples, 0.83%)</title><rect x="0.0690%" y="213" width="0.8282%" height="15" fill="rgb(232,36,49)" fg:x="3" fg:w="36"/><text x="0.3190%" y="223.50"></text></g><g><title>rust_ruleengine`core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (25 samples, 0.58%)</title><rect x="0.3221%" y="197" width="0.5751%" height="15" fill="rgb(209,103,24)" fg:x="14" fg:w="25"/><text x="0.5721%" y="207.50"></text></g><g><title>rust_ruleengine`core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (19 samples, 0.44%)</title><rect x="0.4601%" y="181" width="0.4371%" height="15" fill="rgb(229,88,8)" fg:x="20" fg:w="19"/><text x="0.7101%" y="191.50"></text></g><g><title>rust_ruleengine`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (7 samples, 0.16%)</title><rect x="0.7361%" y="165" width="0.1610%" height="15" fill="rgb(213,181,19)" fg:x="32" fg:w="7"/><text x="0.9861%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (3 samples, 0.07%)</title><rect x="0.8282%" y="149" width="0.0690%" height="15" fill="rgb(254,191,54)" fg:x="36" fg:w="3"/><text x="1.0782%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (2 samples, 0.05%)</title><rect x="0.8512%" y="133" width="0.0460%" height="15" fill="rgb(241,83,37)" fg:x="37" fg:w="2"/><text x="1.1012%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_scan_madvise_free (1 samples, 0.02%)</title><rect x="0.8742%" y="117" width="0.0230%" height="15" fill="rgb(233,36,39)" fg:x="38" fg:w="1"/><text x="1.1242%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.02%)</title><rect x="0.8742%" y="101" width="0.0230%" height="15" fill="rgb(226,3,54)" fg:x="38" fg:w="1"/><text x="1.1242%" y="111.50"></text></g><g><title>rust_ruleengine`&lt;str as serde_json::value::index::Index&gt;::index_into (108 samples, 2.48%)</title><rect x="2.9446%" y="165" width="2.4845%" height="15" fill="rgb(245,192,40)" fg:x="128" fg:w="108"/><text x="3.1946%" y="175.50">ru..</text></g><g><title>libsystem_platform.dylib`_platform_memcmp (1,531 samples, 35.22%)</title><rect x="10.8351%" y="149" width="35.2197%" height="15" fill="rgb(238,167,29)" fg:x="471" fg:w="1531"/><text x="11.0851%" y="159.50">libsystem_platform.dylib`_platform_memcmp</text></g><g><title>rust_ruleengine`&lt;str as serde_json::value::index::Index&gt;::index_into (892 samples, 20.52%)</title><rect x="46.0548%" y="149" width="20.5199%" height="15" fill="rgb(232,182,51)" fg:x="2002" fg:w="892"/><text x="46.3048%" y="159.50">rust_ruleengine`&lt;str as serde_js..</text></g><g><title>rust_ruleengine`DYLD-STUB$$memcmp (168 samples, 3.86%)</title><rect x="66.5746%" y="149" width="3.8647%" height="15" fill="rgb(231,60,39)" fg:x="2894" fg:w="168"/><text x="66.8246%" y="159.50">rust..</text></g><g><title>rust_ruleengine`rust_ruleengine::operators::contains (48 samples, 1.10%)</title><rect x="70.4394%" y="149" width="1.1042%" height="15" fill="rgb(208,69,12)" fg:x="3062" fg:w="48"/><text x="70.6894%" y="159.50"></text></g><g><title>rust_ruleengine`rust_ruleengine::operators::equals (142 samples, 3.27%)</title><rect x="71.5436%" y="149" width="3.2666%" height="15" fill="rgb(235,93,37)" fg:x="3110" fg:w="142"/><text x="71.7936%" y="159.50">rus..</text></g><g><title>libsystem_platform.dylib`_platform_memcmp (167 samples, 3.84%)</title><rect x="74.9712%" y="133" width="3.8417%" height="15" fill="rgb(213,116,39)" fg:x="3259" fg:w="167"/><text x="75.2212%" y="143.50">libs..</text></g><g><title>rust_ruleengine`DYLD-STUB$$memcmp (15 samples, 0.35%)</title><rect x="78.8130%" y="133" width="0.3451%" height="15" fill="rgb(222,207,29)" fg:x="3426" fg:w="15"/><text x="79.0630%" y="143.50"></text></g><g><title>rust_ruleengine`rust_ruleengine::operators::not_equals (675 samples, 15.53%)</title><rect x="74.8102%" y="149" width="15.5280%" height="15" fill="rgb(206,96,30)" fg:x="3252" fg:w="675"/><text x="75.0602%" y="159.50">rust_ruleengine`rust_rul..</text></g><g><title>rust_ruleengine`rust_ruleengine::operators::equals (486 samples, 11.18%)</title><rect x="79.1580%" y="133" width="11.1801%" height="15" fill="rgb(218,138,4)" fg:x="3441" fg:w="486"/><text x="79.4080%" y="143.50">rust_ruleengine`..</text></g><g><title>rust_ruleengine`rust_ruleengine::Condition::evaluate (3,728 samples, 85.76%)</title><rect x="5.4290%" y="165" width="85.7603%" height="15" fill="rgb(250,191,14)" fg:x="236" fg:w="3728"/><text x="5.6790%" y="175.50">rust_ruleengine`rust_ruleengine::Condition::evaluate</text></g><g><title>rust_ruleengine`serde_json::value::partial_eq::_&lt;impl core::cmp::PartialEq&lt;str&gt; for serde_json::value::Value&gt;::eq (37 samples, 0.85%)</title><rect x="90.3382%" y="149" width="0.8512%" height="15" fill="rgb(239,60,40)" fg:x="3927" fg:w="37"/><text x="90.5882%" y="159.50"></text></g><g><title>rust_ruleengine`rust_ruleengine::operators::equals (27 samples, 0.62%)</title><rect x="91.1893%" y="165" width="0.6211%" height="15" fill="rgb(206,27,48)" fg:x="3964" fg:w="27"/><text x="91.4393%" y="175.50"></text></g><g><title>rust_ruleengine`rust_ruleengine::operators::not_equals (14 samples, 0.32%)</title><rect x="91.8104%" y="165" width="0.3221%" height="15" fill="rgb(225,35,8)" fg:x="3991" fg:w="14"/><text x="92.0604%" y="175.50"></text></g><g><title>rust_ruleengine`&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (4,097 samples, 94.25%)</title><rect x="0.9202%" y="181" width="94.2489%" height="15" fill="rgb(250,213,24)" fg:x="40" fg:w="4097"/><text x="1.1702%" y="191.50">rust_ruleengine`&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next</text></g><g><title>rust_ruleengine`serde_json::value::partial_eq::_&lt;impl core::cmp::PartialEq&lt;str&gt; for serde_json::value::Value&gt;::eq (132 samples, 3.04%)</title><rect x="92.1325%" y="165" width="3.0366%" height="15" fill="rgb(247,123,22)" fg:x="4005" fg:w="132"/><text x="92.3825%" y="175.50">rus..</text></g><g><title>rust_ruleengine`DYLD-STUB$$realloc (1 samples, 0.02%)</title><rect x="95.1691%" y="165" width="0.0230%" height="15" fill="rgb(231,138,38)" fg:x="4137" fg:w="1"/><text x="95.4191%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (3 samples, 0.07%)</title><rect x="95.1921%" y="149" width="0.0690%" height="15" fill="rgb(231,145,46)" fg:x="4138" fg:w="3"/><text x="95.4421%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (3 samples, 0.07%)</title><rect x="95.1921%" y="133" width="0.0690%" height="15" fill="rgb(251,118,11)" fg:x="4138" fg:w="3"/><text x="95.4421%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.05%)</title><rect x="95.2151%" y="117" width="0.0460%" height="15" fill="rgb(217,147,25)" fg:x="4139" fg:w="2"/><text x="95.4651%" y="127.50"></text></g><g><title>rust_ruleengine`alloc::raw_vec::RawVecInner&lt;A&gt;::reserve::do_reserve_and_handle (5 samples, 0.12%)</title><rect x="95.1691%" y="181" width="0.1150%" height="15" fill="rgb(247,81,37)" fg:x="4137" fg:w="5"/><text x="95.4191%" y="191.50"></text></g><g><title>rust_ruleengine`alloc::raw_vec::finish_grow (4 samples, 0.09%)</title><rect x="95.1921%" y="165" width="0.0920%" height="15" fill="rgb(209,12,38)" fg:x="4138" fg:w="4"/><text x="95.4421%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.02%)</title><rect x="95.2611%" y="149" width="0.0230%" height="15" fill="rgb(227,1,9)" fg:x="4141" fg:w="1"/><text x="95.5111%" y="159.50"></text></g><g><title>rust_ruleengine`rust_ruleengine::Condition::filter (4,152 samples, 95.51%)</title><rect x="0.8972%" y="213" width="95.5141%" height="15" fill="rgb(248,47,43)" fg:x="39" fg:w="4152"/><text x="1.1472%" y="223.50">rust_ruleengine`rust_ruleengine::Condition::filter</text></g><g><title>rust_ruleengine`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4,151 samples, 95.49%)</title><rect x="0.9202%" y="197" width="95.4911%" height="15" fill="rgb(221,10,30)" fg:x="40" fg:w="4151"/><text x="1.1702%" y="207.50">rust_ruleengine`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>rust_ruleengine`rust_ruleengine::Condition::evaluate (49 samples, 1.13%)</title><rect x="95.2841%" y="181" width="1.1272%" height="15" fill="rgb(210,229,1)" fg:x="4142" fg:w="49"/><text x="95.5341%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.07%)</title><rect x="96.4343%" y="149" width="0.0690%" height="15" fill="rgb(222,148,37)" fg:x="4192" fg:w="3"/><text x="96.6843%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (3 samples, 0.07%)</title><rect x="96.5033%" y="133" width="0.0690%" height="15" fill="rgb(234,67,33)" fg:x="4195" fg:w="3"/><text x="96.7533%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (3 samples, 0.07%)</title><rect x="96.5723%" y="133" width="0.0690%" height="15" fill="rgb(247,98,35)" fg:x="4198" fg:w="3"/><text x="96.8223%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (1 samples, 0.02%)</title><rect x="96.7334%" y="117" width="0.0230%" height="15" fill="rgb(247,138,52)" fg:x="4205" fg:w="1"/><text x="96.9834%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.05%)</title><rect x="96.7564%" y="117" width="0.0460%" height="15" fill="rgb(213,79,30)" fg:x="4206" fg:w="2"/><text x="97.0064%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="96.8024%" y="101" width="0.0230%" height="15" fill="rgb(246,177,23)" fg:x="4208" fg:w="1"/><text x="97.0524%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.02%)</title><rect x="96.8254%" y="101" width="0.0230%" height="15" fill="rgb(230,62,27)" fg:x="4209" fg:w="1"/><text x="97.0754%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.05%)</title><rect x="96.8484%" y="101" width="0.0460%" height="15" fill="rgb(216,154,8)" fg:x="4210" fg:w="2"/><text x="97.0984%" y="111.50"></text></g><g><title>rust_ruleengine`core::str::converts::from_utf8 (4 samples, 0.09%)</title><rect x="97.0324%" y="85" width="0.0920%" height="15" fill="rgb(244,35,45)" fg:x="4218" fg:w="4"/><text x="97.2824%" y="95.50"></text></g><g><title>rust_ruleengine`&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (11 samples, 0.25%)</title><rect x="96.8944%" y="101" width="0.2530%" height="15" fill="rgb(251,115,12)" fg:x="4212" fg:w="11"/><text x="97.1444%" y="111.50"></text></g><g><title>rust_ruleengine`std::io::uninlined_slow_read_byte (1 samples, 0.02%)</title><rect x="97.1245%" y="85" width="0.0230%" height="15" fill="rgb(240,54,50)" fg:x="4222" fg:w="1"/><text x="97.3745%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`read (1 samples, 0.02%)</title><rect x="97.1245%" y="69" width="0.0230%" height="15" fill="rgb(233,84,52)" fg:x="4222" fg:w="1"/><text x="97.3745%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.07%)</title><rect x="97.1935%" y="85" width="0.0690%" height="15" fill="rgb(207,117,47)" fg:x="4225" fg:w="3"/><text x="97.4435%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (3 samples, 0.07%)</title><rect x="97.2625%" y="85" width="0.0690%" height="15" fill="rgb(249,43,39)" fg:x="4228" fg:w="3"/><text x="97.5125%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="97.3315%" y="85" width="0.0230%" height="15" fill="rgb(209,38,44)" fg:x="4231" fg:w="1"/><text x="97.5815%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.02%)</title><rect x="97.3775%" y="69" width="0.0230%" height="15" fill="rgb(236,212,23)" fg:x="4233" fg:w="1"/><text x="97.6275%" y="79.50"></text></g><g><title>rust_ruleengine`&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.05%)</title><rect x="97.4005%" y="69" width="0.0460%" height="15" fill="rgb(242,79,21)" fg:x="4234" fg:w="2"/><text x="97.6505%" y="79.50"></text></g><g><title>rust_ruleengine`&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (2 samples, 0.05%)</title><rect x="97.4005%" y="53" width="0.0460%" height="15" fill="rgb(211,96,35)" fg:x="4234" fg:w="2"/><text x="97.6505%" y="63.50"></text></g><g><title>rust_ruleengine`&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (24 samples, 0.55%)</title><rect x="97.4465%" y="69" width="0.5521%" height="15" fill="rgb(253,215,40)" fg:x="4236" fg:w="24"/><text x="97.6965%" y="79.50"></text></g><g><title>rust_ruleengine`core::str::converts::from_utf8 (4 samples, 0.09%)</title><rect x="97.9066%" y="53" width="0.0920%" height="15" fill="rgb(211,81,21)" fg:x="4256" fg:w="4"/><text x="98.1566%" y="63.50"></text></g><g><title>rust_ruleengine`&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (29 samples, 0.67%)</title><rect x="97.3545%" y="85" width="0.6671%" height="15" fill="rgb(208,190,38)" fg:x="4232" fg:w="29"/><text x="97.6045%" y="95.50"></text></g><g><title>rust_ruleengine`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.02%)</title><rect x="97.9986%" y="69" width="0.0230%" height="15" fill="rgb(235,213,38)" fg:x="4260" fg:w="1"/><text x="98.2486%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.02%)</title><rect x="97.9986%" y="53" width="0.0230%" height="15" fill="rgb(237,122,38)" fg:x="4260" fg:w="1"/><text x="98.2486%" y="63.50"></text></g><g><title>rust_ruleengine`&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed::has_next_key (2 samples, 0.05%)</title><rect x="98.0216%" y="85" width="0.0460%" height="15" fill="rgb(244,218,35)" fg:x="4261" fg:w="2"/><text x="98.2716%" y="95.50"></text></g><g><title>rust_ruleengine`&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed::has_next_element (1 samples, 0.02%)</title><rect x="98.0676%" y="85" width="0.0230%" height="15" fill="rgb(240,68,47)" fg:x="4263" fg:w="1"/><text x="98.3176%" y="95.50"></text></g><g><title>rust_ruleengine`core::str::converts::from_utf8 (4 samples, 0.09%)</title><rect x="98.2057%" y="69" width="0.0920%" height="15" fill="rgb(210,16,53)" fg:x="4269" fg:w="4"/><text x="98.4557%" y="79.50"></text></g><g><title>rust_ruleengine`&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (10 samples, 0.23%)</title><rect x="98.0906%" y="85" width="0.2300%" height="15" fill="rgb(235,124,12)" fg:x="4264" fg:w="10"/><text x="98.3406%" y="95.50"></text></g><g><title>rust_ruleengine`std::io::uninlined_slow_read_byte (1 samples, 0.02%)</title><rect x="98.2977%" y="69" width="0.0230%" height="15" fill="rgb(224,169,11)" fg:x="4273" fg:w="1"/><text x="98.5477%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`read (1 samples, 0.02%)</title><rect x="98.2977%" y="53" width="0.0230%" height="15" fill="rgb(250,166,2)" fg:x="4273" fg:w="1"/><text x="98.5477%" y="63.50"></text></g><g><title>rust_ruleengine`DYLD-STUB$$memcmp (1 samples, 0.02%)</title><rect x="98.3207%" y="85" width="0.0230%" height="15" fill="rgb(242,216,29)" fg:x="4274" fg:w="1"/><text x="98.5707%" y="95.50"></text></g><g><title>rust_ruleengine`DYLD-STUB$$memcpy (1 samples, 0.02%)</title><rect x="98.3437%" y="85" width="0.0230%" height="15" fill="rgb(230,116,27)" fg:x="4275" fg:w="1"/><text x="98.5937%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.02%)</title><rect x="98.5507%" y="53" width="0.0230%" height="15" fill="rgb(228,99,48)" fg:x="4284" fg:w="1"/><text x="98.8007%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.02%)</title><rect x="98.5507%" y="37" width="0.0230%" height="15" fill="rgb(253,11,6)" fg:x="4284" fg:w="1"/><text x="98.8007%" y="47.50"></text></g><g><title>rust_ruleengine`DYLD-STUB$$memmove (1 samples, 0.02%)</title><rect x="98.5737%" y="53" width="0.0230%" height="15" fill="rgb(247,143,39)" fg:x="4285" fg:w="1"/><text x="98.8237%" y="63.50"></text></g><g><title>rust_ruleengine`alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (13 samples, 0.30%)</title><rect x="98.3667%" y="85" width="0.2991%" height="15" fill="rgb(236,97,10)" fg:x="4276" fg:w="13"/><text x="98.6167%" y="95.50"></text></g><g><title>rust_ruleengine`alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (10 samples, 0.23%)</title><rect x="98.4357%" y="69" width="0.2300%" height="15" fill="rgb(233,208,19)" fg:x="4279" fg:w="10"/><text x="98.6857%" y="79.50"></text></g><g><title>rust_ruleengine`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (3 samples, 0.07%)</title><rect x="98.5967%" y="53" width="0.0690%" height="15" fill="rgb(216,164,2)" fg:x="4286" fg:w="3"/><text x="98.8467%" y="63.50"></text></g><g><title>rust_ruleengine`&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (67 samples, 1.54%)</title><rect x="97.1475%" y="101" width="1.5413%" height="15" fill="rgb(220,129,5)" fg:x="4223" fg:w="67"/><text x="97.3975%" y="111.50"></text></g><g><title>rust_ruleengine`alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.02%)</title><rect x="98.6657%" y="85" width="0.0230%" height="15" fill="rgb(242,17,10)" fg:x="4289" fg:w="1"/><text x="98.9157%" y="95.50"></text></g><g><title>rust_ruleengine`core::str::converts::from_utf8 (1 samples, 0.02%)</title><rect x="98.6888%" y="101" width="0.0230%" height="15" fill="rgb(242,107,0)" fg:x="4290" fg:w="1"/><text x="98.9388%" y="111.50"></text></g><g><title>rust_ruleengine`&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (84 samples, 1.93%)</title><rect x="96.8024%" y="117" width="1.9324%" height="15" fill="rgb(251,28,31)" fg:x="4208" fg:w="84"/><text x="97.0524%" y="127.50">r..</text></g><g><title>rust_ruleengine`serde_json::de::Deserializer&lt;R&gt;::parse_object_colon (1 samples, 0.02%)</title><rect x="98.7118%" y="101" width="0.0230%" height="15" fill="rgb(233,223,10)" fg:x="4291" fg:w="1"/><text x="98.9618%" y="111.50"></text></g><g><title>rust_ruleengine`&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed::has_next_element (3 samples, 0.07%)</title><rect x="98.7348%" y="117" width="0.0690%" height="15" fill="rgb(215,21,27)" fg:x="4292" fg:w="3"/><text x="98.9848%" y="127.50"></text></g><g><title>rust_ruleengine`core::str::converts::from_utf8 (2 samples, 0.05%)</title><rect x="99.0338%" y="101" width="0.0460%" height="15" fill="rgb(232,23,21)" fg:x="4305" fg:w="2"/><text x="99.2838%" y="111.50"></text></g><g><title>rust_ruleengine`&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (14 samples, 0.32%)</title><rect x="98.8038%" y="117" width="0.3221%" height="15" fill="rgb(244,5,23)" fg:x="4295" fg:w="14"/><text x="99.0538%" y="127.50"></text></g><g><title>rust_ruleengine`std::io::uninlined_slow_read_byte (2 samples, 0.05%)</title><rect x="99.0798%" y="101" width="0.0460%" height="15" fill="rgb(226,81,46)" fg:x="4307" fg:w="2"/><text x="99.3298%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`read (2 samples, 0.05%)</title><rect x="99.0798%" y="85" width="0.0460%" height="15" fill="rgb(247,70,30)" fg:x="4307" fg:w="2"/><text x="99.3298%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="99.1488%" y="101" width="0.0230%" height="15" fill="rgb(212,68,19)" fg:x="4310" fg:w="1"/><text x="99.3988%" y="111.50"></text></g><g><title>rust_ruleengine`DYLD-STUB$$realloc (1 samples, 0.02%)</title><rect x="99.1718%" y="101" width="0.0230%" height="15" fill="rgb(240,187,13)" fg:x="4311" fg:w="1"/><text x="99.4218%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.02%)</title><rect x="99.1948%" y="53" width="0.0230%" height="15" fill="rgb(223,113,26)" fg:x="4312" fg:w="1"/><text x="99.4448%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (2 samples, 0.05%)</title><rect x="99.1948%" y="85" width="0.0460%" height="15" fill="rgb(206,192,2)" fg:x="4312" fg:w="2"/><text x="99.4448%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (2 samples, 0.05%)</title><rect x="99.1948%" y="69" width="0.0460%" height="15" fill="rgb(241,108,4)" fg:x="4312" fg:w="2"/><text x="99.4448%" y="79.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="99.2179%" y="53" width="0.0230%" height="15" fill="rgb(247,173,49)" fg:x="4313" fg:w="1"/><text x="99.4679%" y="63.50"></text></g><g><title>rust_ruleengine`&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (114 samples, 2.62%)</title><rect x="96.6414%" y="133" width="2.6225%" height="15" fill="rgb(224,114,35)" fg:x="4201" fg:w="114"/><text x="96.8914%" y="143.50">ru..</text></g><g><title>rust_ruleengine`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (6 samples, 0.14%)</title><rect x="99.1258%" y="117" width="0.1380%" height="15" fill="rgb(245,159,27)" fg:x="4309" fg:w="6"/><text x="99.3758%" y="127.50"></text></g><g><title>rust_ruleengine`alloc::raw_vec::finish_grow (3 samples, 0.07%)</title><rect x="99.1948%" y="101" width="0.0690%" height="15" fill="rgb(245,172,44)" fg:x="4312" fg:w="3"/><text x="99.4448%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (1 samples, 0.02%)</title><rect x="99.2409%" y="85" width="0.0230%" height="15" fill="rgb(236,23,11)" fg:x="4314" fg:w="1"/><text x="99.4909%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (1 samples, 0.02%)</title><rect x="99.2409%" y="69" width="0.0230%" height="15" fill="rgb(205,117,38)" fg:x="4314" fg:w="1"/><text x="99.4909%" y="79.50"></text></g><g><title>rust_ruleengine`&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (11 samples, 0.25%)</title><rect x="99.2639%" y="133" width="0.2530%" height="15" fill="rgb(237,72,25)" fg:x="4315" fg:w="11"/><text x="99.5139%" y="143.50"></text></g><g><title>rust_ruleengine`core::str::converts::from_utf8 (1 samples, 0.02%)</title><rect x="99.4939%" y="117" width="0.0230%" height="15" fill="rgb(244,70,9)" fg:x="4325" fg:w="1"/><text x="99.7439%" y="127.50"></text></g><g><title>rust_ruleengine`&lt;serde_json::value::de::KeyClassifier as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.02%)</title><rect x="99.5169%" y="133" width="0.0230%" height="15" fill="rgb(217,125,39)" fg:x="4326" fg:w="1"/><text x="99.7669%" y="143.50"></text></g><g><title>rust_ruleengine`&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (1 samples, 0.02%)</title><rect x="99.5169%" y="117" width="0.0230%" height="15" fill="rgb(235,36,10)" fg:x="4326" fg:w="1"/><text x="99.7669%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.02%)</title><rect x="99.6319%" y="101" width="0.0230%" height="15" fill="rgb(251,123,47)" fg:x="4331" fg:w="1"/><text x="99.8819%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.02%)</title><rect x="99.6319%" y="85" width="0.0230%" height="15" fill="rgb(221,13,13)" fg:x="4331" fg:w="1"/><text x="99.8819%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.02%)</title><rect x="99.6319%" y="69" width="0.0230%" height="15" fill="rgb(238,131,9)" fg:x="4331" fg:w="1"/><text x="99.8819%" y="79.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 0.07%)</title><rect x="99.6549%" y="101" width="0.0690%" height="15" fill="rgb(211,50,8)" fg:x="4332" fg:w="3"/><text x="99.9049%" y="111.50"></text></g><g><title>rust_ruleengine`alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (13 samples, 0.30%)</title><rect x="99.5859%" y="117" width="0.2991%" height="15" fill="rgb(245,182,24)" fg:x="4329" fg:w="13"/><text x="99.8359%" y="127.50"></text></g><g><title>rust_ruleengine`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (7 samples, 0.16%)</title><rect x="99.7239%" y="101" width="0.1610%" height="15" fill="rgb(242,14,37)" fg:x="4335" fg:w="7"/><text x="99.9739%" y="111.50"></text></g><g><title>rust_ruleengine`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::KV&gt;::split (6 samples, 0.14%)</title><rect x="99.7470%" y="85" width="0.1380%" height="15" fill="rgb(246,228,12)" fg:x="4336" fg:w="6"/><text x="99.9970%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.05%)</title><rect x="99.8390%" y="69" width="0.0460%" height="15" fill="rgb(213,55,15)" fg:x="4340" fg:w="2"/><text x="100.0890%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 0.05%)</title><rect x="99.8390%" y="53" width="0.0460%" height="15" fill="rgb(209,9,3)" fg:x="4340" fg:w="2"/><text x="100.0890%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (1 samples, 0.02%)</title><rect x="99.8620%" y="37" width="0.0230%" height="15" fill="rgb(230,59,30)" fg:x="4341" fg:w="1"/><text x="100.1120%" y="47.50"></text></g><g><title>rust_ruleengine`alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (16 samples, 0.37%)</title><rect x="99.5399%" y="133" width="0.3681%" height="15" fill="rgb(209,121,21)" fg:x="4327" fg:w="16"/><text x="99.7899%" y="143.50"></text></g><g><title>rust_ruleengine`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.02%)</title><rect x="99.8850%" y="117" width="0.0230%" height="15" fill="rgb(220,109,13)" fg:x="4342" fg:w="1"/><text x="100.1350%" y="127.50"></text></g><g><title>rust_ruleengine`&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (150 samples, 3.45%)</title><rect x="96.5033%" y="149" width="3.4507%" height="15" fill="rgb(232,18,1)" fg:x="4195" fg:w="150"/><text x="96.7533%" y="159.50">rus..</text></g><g><title>rust_ruleengine`alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.05%)</title><rect x="99.9080%" y="133" width="0.0460%" height="15" fill="rgb(215,41,42)" fg:x="4343" fg:w="2"/><text x="100.1580%" y="143.50"></text></g><g><title>dyld`start (4,346 samples, 99.98%)</title><rect x="0.0000%" y="309" width="99.9770%" height="15" fill="rgb(224,123,36)" fg:x="0" fg:w="4346"/><text x="0.2500%" y="319.50">dyld`start</text></g><g><title>rust_ruleengine`main (4,346 samples, 99.98%)</title><rect x="0.0000%" y="293" width="99.9770%" height="15" fill="rgb(240,125,3)" fg:x="0" fg:w="4346"/><text x="0.2500%" y="303.50">rust_ruleengine`main</text></g><g><title>rust_ruleengine`std::rt::lang_start_internal (4,346 samples, 99.98%)</title><rect x="0.0000%" y="277" width="99.9770%" height="15" fill="rgb(205,98,50)" fg:x="0" fg:w="4346"/><text x="0.2500%" y="287.50">rust_ruleengine`std::rt::lang_start_internal</text></g><g><title>rust_ruleengine`std::rt::lang_start::_{{closure}} (4,346 samples, 99.98%)</title><rect x="0.0000%" y="261" width="99.9770%" height="15" fill="rgb(205,185,37)" fg:x="0" fg:w="4346"/><text x="0.2500%" y="271.50">rust_ruleengine`std::rt::lang_start::_{{closure}}</text></g><g><title>rust_ruleengine`std::sys::backtrace::__rust_begin_short_backtrace (4,346 samples, 99.98%)</title><rect x="0.0000%" y="245" width="99.9770%" height="15" fill="rgb(238,207,15)" fg:x="0" fg:w="4346"/><text x="0.2500%" y="255.50">rust_ruleengine`std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>rust_ruleengine`rust_ruleengine::main (4,346 samples, 99.98%)</title><rect x="0.0000%" y="229" width="99.9770%" height="15" fill="rgb(213,199,42)" fg:x="0" fg:w="4346"/><text x="0.2500%" y="239.50">rust_ruleengine`rust_ruleengine::main</text></g><g><title>rust_ruleengine`rust_ruleengine::utils::read_json::read_json_file_streaming (155 samples, 3.57%)</title><rect x="96.4113%" y="213" width="3.5657%" height="15" fill="rgb(235,201,11)" fg:x="4191" fg:w="155"/><text x="96.6613%" y="223.50">rust..</text></g><g><title>rust_ruleengine`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_seq (155 samples, 3.57%)</title><rect x="96.4113%" y="197" width="3.5657%" height="15" fill="rgb(207,46,11)" fg:x="4191" fg:w="155"/><text x="96.6613%" y="207.50">rust..</text></g><g><title>rust_ruleengine`&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (155 samples, 3.57%)</title><rect x="96.4113%" y="181" width="3.5657%" height="15" fill="rgb(241,35,35)" fg:x="4191" fg:w="155"/><text x="96.6613%" y="191.50">rust..</text></g><g><title>rust_ruleengine`&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (155 samples, 3.57%)</title><rect x="96.4113%" y="165" width="3.5657%" height="15" fill="rgb(243,32,47)" fg:x="4191" fg:w="155"/><text x="96.6613%" y="175.50">rust..</text></g><g><title>rust_ruleengine`alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.02%)</title><rect x="99.9540%" y="149" width="0.0230%" height="15" fill="rgb(247,202,23)" fg:x="4345" fg:w="1"/><text x="100.2040%" y="159.50"></text></g><g><title>all (4,347 samples, 100%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(219,102,11)" fg:x="0" fg:w="4347"/><text x="0.2500%" y="335.50"></text></g><g><title>libsystem_kernel.dylib`__exit (1 samples, 0.02%)</title><rect x="99.9770%" y="309" width="0.0230%" height="15" fill="rgb(243,110,44)" fg:x="4346" fg:w="1"/><text x="100.2270%" y="319.50"></text></g></svg></svg>