<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="374" onload="init(evt)" viewBox="0 0 1200 374" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="374" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="357.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="357.00"> </text><svg id="frames" x="10" width="1180" total_samples="4988"><g><title>libsystem_malloc.dylib`_free (1 samples, 0.02%)</title><rect x="0.0000%" y="229" width="0.0200%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.02%)</title><rect x="0.0200%" y="213" width="0.0200%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="1"/><text x="0.2700%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_free (2 samples, 0.04%)</title><rect x="0.0401%" y="197" width="0.0401%" height="15" fill="rgb(221,193,54)" fg:x="2" fg:w="2"/><text x="0.2901%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.02%)</title><rect x="0.0802%" y="197" width="0.0200%" height="15" fill="rgb(248,212,6)" fg:x="4" fg:w="1"/><text x="0.3302%" y="207.50"></text></g><g><title>rust_ruleengine`DYLD-STUB$$free (1 samples, 0.02%)</title><rect x="0.1002%" y="197" width="0.0200%" height="15" fill="rgb(208,68,35)" fg:x="5" fg:w="1"/><text x="0.3502%" y="207.50"></text></g><g><title>rust_ruleengine`__rdl_dealloc (1 samples, 0.02%)</title><rect x="0.1203%" y="197" width="0.0200%" height="15" fill="rgb(232,128,0)" fg:x="6" fg:w="1"/><text x="0.3703%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (4 samples, 0.08%)</title><rect x="0.1403%" y="181" width="0.0802%" height="15" fill="rgb(207,160,47)" fg:x="7" fg:w="4"/><text x="0.3903%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (1 samples, 0.02%)</title><rect x="0.2205%" y="181" width="0.0200%" height="15" fill="rgb(228,23,34)" fg:x="11" fg:w="1"/><text x="0.4705%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block_locked (1 samples, 0.02%)</title><rect x="0.2205%" y="165" width="0.0200%" height="15" fill="rgb(218,30,26)" fg:x="11" fg:w="1"/><text x="0.4705%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.02%)</title><rect x="0.2205%" y="149" width="0.0200%" height="15" fill="rgb(220,122,19)" fg:x="11" fg:w="1"/><text x="0.4705%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_scan_madvise_free (1 samples, 0.02%)</title><rect x="0.2606%" y="133" width="0.0200%" height="15" fill="rgb(250,228,42)" fg:x="13" fg:w="1"/><text x="0.5106%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.02%)</title><rect x="0.2606%" y="117" width="0.0200%" height="15" fill="rgb(240,193,28)" fg:x="13" fg:w="1"/><text x="0.5106%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (6 samples, 0.12%)</title><rect x="0.2406%" y="165" width="0.1203%" height="15" fill="rgb(216,20,37)" fg:x="12" fg:w="6"/><text x="0.4906%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (5 samples, 0.10%)</title><rect x="0.2606%" y="149" width="0.1002%" height="15" fill="rgb(206,188,39)" fg:x="13" fg:w="5"/><text x="0.5106%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_madvise_free_range_no_lock (4 samples, 0.08%)</title><rect x="0.2807%" y="133" width="0.0802%" height="15" fill="rgb(217,207,13)" fg:x="14" fg:w="4"/><text x="0.5307%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`madvise (4 samples, 0.08%)</title><rect x="0.2807%" y="117" width="0.0802%" height="15" fill="rgb(231,73,38)" fg:x="14" fg:w="4"/><text x="0.5307%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.02%)</title><rect x="0.3609%" y="165" width="0.0200%" height="15" fill="rgb(225,20,46)" fg:x="18" fg:w="1"/><text x="0.6109%" y="175.50"></text></g><g><title>rust_ruleengine`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (9 samples, 0.18%)</title><rect x="0.2406%" y="181" width="0.1804%" height="15" fill="rgb(210,31,41)" fg:x="12" fg:w="9"/><text x="0.4906%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (2 samples, 0.04%)</title><rect x="0.3809%" y="165" width="0.0401%" height="15" fill="rgb(221,200,47)" fg:x="19" fg:w="2"/><text x="0.6309%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_free (3 samples, 0.06%)</title><rect x="0.4411%" y="149" width="0.0601%" height="15" fill="rgb(226,26,5)" fg:x="22" fg:w="3"/><text x="0.6911%" y="159.50"></text></g><g><title>rust_ruleengine`DYLD-STUB$$free (1 samples, 0.02%)</title><rect x="0.5012%" y="149" width="0.0200%" height="15" fill="rgb(249,33,26)" fg:x="25" fg:w="1"/><text x="0.7512%" y="159.50"></text></g><g><title>rust_ruleengine`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.02%)</title><rect x="0.5213%" y="149" width="0.0200%" height="15" fill="rgb(235,183,28)" fg:x="26" fg:w="1"/><text x="0.7713%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.04%)</title><rect x="0.5413%" y="133" width="0.0401%" height="15" fill="rgb(221,5,38)" fg:x="27" fg:w="2"/><text x="0.7913%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (2 samples, 0.04%)</title><rect x="0.5814%" y="133" width="0.0401%" height="15" fill="rgb(247,18,42)" fg:x="29" fg:w="2"/><text x="0.8314%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block_locked (2 samples, 0.04%)</title><rect x="0.5814%" y="117" width="0.0401%" height="15" fill="rgb(241,131,45)" fg:x="29" fg:w="2"/><text x="0.8314%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`madvise (2 samples, 0.04%)</title><rect x="0.5814%" y="101" width="0.0401%" height="15" fill="rgb(249,31,29)" fg:x="29" fg:w="2"/><text x="0.8314%" y="111.50"></text></g><g><title>rust_ruleengine`DYLD-STUB$$free (1 samples, 0.02%)</title><rect x="0.6215%" y="133" width="0.0200%" height="15" fill="rgb(225,111,53)" fg:x="31" fg:w="1"/><text x="0.8715%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (2 samples, 0.04%)</title><rect x="0.6816%" y="117" width="0.0401%" height="15" fill="rgb(238,160,17)" fg:x="34" fg:w="2"/><text x="0.9316%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (2 samples, 0.04%)</title><rect x="0.6816%" y="101" width="0.0401%" height="15" fill="rgb(214,148,48)" fg:x="34" fg:w="2"/><text x="0.9316%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_plat (1 samples, 0.02%)</title><rect x="0.7017%" y="85" width="0.0200%" height="15" fill="rgb(232,36,49)" fg:x="35" fg:w="1"/><text x="0.9517%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (1 samples, 0.02%)</title><rect x="0.7017%" y="69" width="0.0200%" height="15" fill="rgb(209,103,24)" fg:x="35" fg:w="1"/><text x="0.9517%" y="79.50"></text></g><g><title>rust_ruleengine`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (5 samples, 0.10%)</title><rect x="0.6415%" y="133" width="0.1002%" height="15" fill="rgb(229,88,8)" fg:x="32" fg:w="5"/><text x="0.8915%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.02%)</title><rect x="0.7217%" y="117" width="0.0200%" height="15" fill="rgb(213,181,19)" fg:x="36" fg:w="1"/><text x="0.9717%" y="127.50"></text></g><g><title>rust_ruleengine`core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (37 samples, 0.74%)</title><rect x="0.0401%" y="213" width="0.7418%" height="15" fill="rgb(254,191,54)" fg:x="2" fg:w="37"/><text x="0.2901%" y="223.50"></text></g><g><title>rust_ruleengine`core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (32 samples, 0.64%)</title><rect x="0.1403%" y="197" width="0.6415%" height="15" fill="rgb(241,83,37)" fg:x="7" fg:w="32"/><text x="0.3903%" y="207.50"></text></g><g><title>rust_ruleengine`core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (18 samples, 0.36%)</title><rect x="0.4210%" y="181" width="0.3609%" height="15" fill="rgb(233,36,39)" fg:x="21" fg:w="18"/><text x="0.6710%" y="191.50"></text></g><g><title>rust_ruleengine`core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (17 samples, 0.34%)</title><rect x="0.4411%" y="165" width="0.3408%" height="15" fill="rgb(226,3,54)" fg:x="22" fg:w="17"/><text x="0.6911%" y="175.50"></text></g><g><title>rust_ruleengine`core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (12 samples, 0.24%)</title><rect x="0.5413%" y="149" width="0.2406%" height="15" fill="rgb(245,192,40)" fg:x="27" fg:w="12"/><text x="0.7913%" y="159.50"></text></g><g><title>rust_ruleengine`core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.04%)</title><rect x="0.7418%" y="133" width="0.0401%" height="15" fill="rgb(238,167,29)" fg:x="37" fg:w="2"/><text x="0.9918%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.02%)</title><rect x="0.7618%" y="117" width="0.0200%" height="15" fill="rgb(232,182,51)" fg:x="38" fg:w="1"/><text x="1.0118%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`malloc (1 samples, 0.02%)</title><rect x="0.7819%" y="197" width="0.0200%" height="15" fill="rgb(231,60,39)" fg:x="39" fg:w="1"/><text x="1.0319%" y="207.50"></text></g><g><title>rust_ruleengine`&lt;alloc::string::String as serde_json::value::index::Index&gt;::index_into (201 samples, 4.03%)</title><rect x="4.9920%" y="165" width="4.0297%" height="15" fill="rgb(208,69,12)" fg:x="249" fg:w="201"/><text x="5.2420%" y="175.50">rust..</text></g><g><title>libsystem_platform.dylib`_platform_memcmp (1,376 samples, 27.59%)</title><rect x="12.5301%" y="149" width="27.5862%" height="15" fill="rgb(235,93,37)" fg:x="625" fg:w="1376"/><text x="12.7801%" y="159.50">libsystem_platform.dylib`_platform_memcmp</text></g><g><title>rust_ruleengine`&lt;alloc::string::String as serde_json::value::index::Index&gt;::index_into (1,189 samples, 23.84%)</title><rect x="40.1163%" y="149" width="23.8372%" height="15" fill="rgb(213,116,39)" fg:x="2001" fg:w="1189"/><text x="40.3663%" y="159.50">rust_ruleengine`&lt;alloc::string::String..</text></g><g><title>rust_ruleengine`DYLD-STUB$$memcmp (178 samples, 3.57%)</title><rect x="63.9535%" y="149" width="3.5686%" height="15" fill="rgb(222,207,29)" fg:x="3190" fg:w="178"/><text x="64.2035%" y="159.50">rust..</text></g><g><title>rust_ruleengine`core::hash::BuildHasher::hash_one (4 samples, 0.08%)</title><rect x="67.5221%" y="149" width="0.0802%" height="15" fill="rgb(206,96,30)" fg:x="3368" fg:w="4"/><text x="67.7721%" y="159.50"></text></g><g><title>rust_ruleengine`rust_ruleengine::operators::contains (47 samples, 0.94%)</title><rect x="67.6022%" y="149" width="0.9423%" height="15" fill="rgb(218,138,4)" fg:x="3372" fg:w="47"/><text x="67.8522%" y="159.50"></text></g><g><title>rust_ruleengine`rust_ruleengine::operators::equals (60 samples, 1.20%)</title><rect x="68.5445%" y="149" width="1.2029%" height="15" fill="rgb(250,191,14)" fg:x="3419" fg:w="60"/><text x="68.7945%" y="159.50"></text></g><g><title>rust_ruleengine`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (164 samples, 3.29%)</title><rect x="73.6768%" y="133" width="3.2879%" height="15" fill="rgb(239,60,40)" fg:x="3675" fg:w="164"/><text x="73.9268%" y="143.50">rus..</text></g><g><title>rust_ruleengine`rust_ruleengine::operators::get_operator_fn (571 samples, 11.45%)</title><rect x="69.7474%" y="149" width="11.4475%" height="15" fill="rgb(206,27,48)" fg:x="3479" fg:w="571"/><text x="69.9974%" y="159.50">rust_ruleengine`r..</text></g><g><title>rust_ruleengine`core::hash::BuildHasher::hash_one (211 samples, 4.23%)</title><rect x="76.9647%" y="133" width="4.2302%" height="15" fill="rgb(225,35,8)" fg:x="3839" fg:w="211"/><text x="77.2147%" y="143.50">rust_..</text></g><g><title>libsystem_platform.dylib`_platform_memcmp (153 samples, 3.07%)</title><rect x="81.8565%" y="133" width="3.0674%" height="15" fill="rgb(250,213,24)" fg:x="4083" fg:w="153"/><text x="82.1065%" y="143.50">lib..</text></g><g><title>rust_ruleengine`DYLD-STUB$$memcmp (5 samples, 0.10%)</title><rect x="84.9238%" y="133" width="0.1002%" height="15" fill="rgb(247,123,22)" fg:x="4236" fg:w="5"/><text x="85.1738%" y="143.50"></text></g><g><title>rust_ruleengine`rust_ruleengine::operators::not_equals (540 samples, 10.83%)</title><rect x="81.1949%" y="149" width="10.8260%" height="15" fill="rgb(231,138,38)" fg:x="4050" fg:w="540"/><text x="81.4449%" y="159.50">rust_ruleengine`..</text></g><g><title>rust_ruleengine`rust_ruleengine::operators::equals (349 samples, 7.00%)</title><rect x="85.0241%" y="133" width="6.9968%" height="15" fill="rgb(231,145,46)" fg:x="4241" fg:w="349"/><text x="85.2741%" y="143.50">rust_rule..</text></g><g><title>rust_ruleengine`rust_ruleengine::Condition::evaluate (4,153 samples, 83.26%)</title><rect x="9.0217%" y="165" width="83.2598%" height="15" fill="rgb(251,118,11)" fg:x="450" fg:w="4153"/><text x="9.2717%" y="175.50">rust_ruleengine`rust_ruleengine::Condition::evaluate</text></g><g><title>rust_ruleengine`serde_json::value::partial_eq::_&lt;impl core::cmp::PartialEq&lt;str&gt; for serde_json::value::Value&gt;::eq (13 samples, 0.26%)</title><rect x="92.0209%" y="149" width="0.2606%" height="15" fill="rgb(217,147,25)" fg:x="4590" fg:w="13"/><text x="92.2709%" y="159.50"></text></g><g><title>rust_ruleengine`rust_ruleengine::operators::contains (3 samples, 0.06%)</title><rect x="92.2815%" y="165" width="0.0601%" height="15" fill="rgb(247,81,37)" fg:x="4603" fg:w="3"/><text x="92.5315%" y="175.50"></text></g><g><title>rust_ruleengine`rust_ruleengine::operators::equals (18 samples, 0.36%)</title><rect x="92.3416%" y="165" width="0.3609%" height="15" fill="rgb(209,12,38)" fg:x="4606" fg:w="18"/><text x="92.5916%" y="175.50"></text></g><g><title>rust_ruleengine`rust_ruleengine::operators::get_operator_fn (86 samples, 1.72%)</title><rect x="92.7025%" y="165" width="1.7241%" height="15" fill="rgb(227,1,9)" fg:x="4624" fg:w="86"/><text x="92.9525%" y="175.50"></text></g><g><title>rust_ruleengine`rust_ruleengine::operators::not_equals (10 samples, 0.20%)</title><rect x="94.4266%" y="165" width="0.2005%" height="15" fill="rgb(248,47,43)" fg:x="4710" fg:w="10"/><text x="94.6766%" y="175.50"></text></g><g><title>rust_ruleengine`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4,776 samples, 95.75%)</title><rect x="0.8019%" y="197" width="95.7498%" height="15" fill="rgb(221,10,30)" fg:x="40" fg:w="4776"/><text x="1.0519%" y="207.50">rust_ruleengine`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>rust_ruleengine`rust_ruleengine::Condition::evaluate (4,766 samples, 95.55%)</title><rect x="1.0024%" y="181" width="95.5493%" height="15" fill="rgb(210,229,1)" fg:x="50" fg:w="4766"/><text x="1.2524%" y="191.50">rust_ruleengine`rust_ruleengine::Condition::evaluate</text></g><g><title>rust_ruleengine`serde_json::value::partial_eq::_&lt;impl core::cmp::PartialEq&lt;str&gt; for serde_json::value::Value&gt;::eq (96 samples, 1.92%)</title><rect x="94.6271%" y="165" width="1.9246%" height="15" fill="rgb(222,148,37)" fg:x="4720" fg:w="96"/><text x="94.8771%" y="175.50">r..</text></g><g><title>rust_ruleengine`rust_ruleengine::Condition::filter (4,800 samples, 96.23%)</title><rect x="0.7819%" y="213" width="96.2310%" height="15" fill="rgb(234,67,33)" fg:x="39" fg:w="4800"/><text x="1.0319%" y="223.50">rust_ruleengine`rust_ruleengine::Condition::filter</text></g><g><title>rust_ruleengine`rust_ruleengine::Condition::evaluate (23 samples, 0.46%)</title><rect x="96.5517%" y="197" width="0.4611%" height="15" fill="rgb(247,98,35)" fg:x="4816" fg:w="23"/><text x="96.8017%" y="207.50"></text></g><g><title>rust_ruleengine`&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed::has_next_key (1 samples, 0.02%)</title><rect x="97.0128%" y="149" width="0.0200%" height="15" fill="rgb(247,138,52)" fg:x="4839" fg:w="1"/><text x="97.2628%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (4 samples, 0.08%)</title><rect x="97.0529%" y="133" width="0.0802%" height="15" fill="rgb(213,79,30)" fg:x="4841" fg:w="4"/><text x="97.3029%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (3 samples, 0.06%)</title><rect x="97.1331%" y="133" width="0.0601%" height="15" fill="rgb(246,177,23)" fg:x="4845" fg:w="3"/><text x="97.3831%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (1 samples, 0.02%)</title><rect x="97.2735%" y="117" width="0.0200%" height="15" fill="rgb(230,62,27)" fg:x="4852" fg:w="1"/><text x="97.5235%" y="127.50"></text></g><g><title>rust_ruleengine`&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (4 samples, 0.08%)</title><rect x="97.2935%" y="101" width="0.0802%" height="15" fill="rgb(216,154,8)" fg:x="4853" fg:w="4"/><text x="97.5435%" y="111.50"></text></g><g><title>rust_ruleengine`std::io::uninlined_slow_read_byte (1 samples, 0.02%)</title><rect x="97.3536%" y="85" width="0.0200%" height="15" fill="rgb(244,35,45)" fg:x="4856" fg:w="1"/><text x="97.6036%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`read (1 samples, 0.02%)</title><rect x="97.3536%" y="69" width="0.0200%" height="15" fill="rgb(251,115,12)" fg:x="4856" fg:w="1"/><text x="97.6036%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="97.3937%" y="85" width="0.0200%" height="15" fill="rgb(240,54,50)" fg:x="4858" fg:w="1"/><text x="97.6437%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="97.4138%" y="85" width="0.0200%" height="15" fill="rgb(233,84,52)" fg:x="4859" fg:w="1"/><text x="97.6638%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (5 samples, 0.10%)</title><rect x="97.4940%" y="69" width="0.1002%" height="15" fill="rgb(207,117,47)" fg:x="4863" fg:w="5"/><text x="97.7440%" y="79.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="97.5942%" y="69" width="0.0200%" height="15" fill="rgb(249,43,39)" fg:x="4868" fg:w="1"/><text x="97.8442%" y="79.50"></text></g><g><title>rust_ruleengine`&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (3 samples, 0.06%)</title><rect x="97.6143%" y="69" width="0.0601%" height="15" fill="rgb(209,38,44)" fg:x="4869" fg:w="3"/><text x="97.8643%" y="79.50"></text></g><g><title>rust_ruleengine`&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (3 samples, 0.06%)</title><rect x="97.6143%" y="53" width="0.0601%" height="15" fill="rgb(236,212,23)" fg:x="4869" fg:w="3"/><text x="97.8643%" y="63.50"></text></g><g><title>rust_ruleengine`&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed::has_next_element (2 samples, 0.04%)</title><rect x="97.6744%" y="69" width="0.0401%" height="15" fill="rgb(242,79,21)" fg:x="4872" fg:w="2"/><text x="97.9244%" y="79.50"></text></g><g><title>rust_ruleengine`core::str::converts::from_utf8 (2 samples, 0.04%)</title><rect x="98.3761%" y="53" width="0.0401%" height="15" fill="rgb(211,96,35)" fg:x="4907" fg:w="2"/><text x="98.6261%" y="63.50"></text></g><g><title>rust_ruleengine`&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (36 samples, 0.72%)</title><rect x="97.7145%" y="69" width="0.7217%" height="15" fill="rgb(253,215,40)" fg:x="4874" fg:w="36"/><text x="97.9645%" y="79.50"></text></g><g><title>rust_ruleengine`std::io::uninlined_slow_read_byte (1 samples, 0.02%)</title><rect x="98.4162%" y="53" width="0.0200%" height="15" fill="rgb(211,81,21)" fg:x="4909" fg:w="1"/><text x="98.6662%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`read (1 samples, 0.02%)</title><rect x="98.4162%" y="37" width="0.0200%" height="15" fill="rgb(208,190,38)" fg:x="4909" fg:w="1"/><text x="98.6662%" y="47.50"></text></g><g><title>rust_ruleengine`&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (53 samples, 1.06%)</title><rect x="97.4338%" y="85" width="1.0626%" height="15" fill="rgb(235,213,38)" fg:x="4860" fg:w="53"/><text x="97.6838%" y="95.50"></text></g><g><title>rust_ruleengine`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (3 samples, 0.06%)</title><rect x="98.4362%" y="69" width="0.0601%" height="15" fill="rgb(237,122,38)" fg:x="4910" fg:w="3"/><text x="98.6862%" y="79.50"></text></g><g><title>rust_ruleengine`alloc::raw_vec::finish_grow (3 samples, 0.06%)</title><rect x="98.4362%" y="53" width="0.0601%" height="15" fill="rgb(244,218,35)" fg:x="4910" fg:w="3"/><text x="98.6862%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (3 samples, 0.06%)</title><rect x="98.4362%" y="37" width="0.0601%" height="15" fill="rgb(240,68,47)" fg:x="4910" fg:w="3"/><text x="98.6862%" y="47.50"></text></g><g><title>rust_ruleengine`&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed::has_next_key (1 samples, 0.02%)</title><rect x="98.4964%" y="85" width="0.0200%" height="15" fill="rgb(210,16,53)" fg:x="4913" fg:w="1"/><text x="98.7464%" y="95.50"></text></g><g><title>rust_ruleengine`std::io::uninlined_slow_read_byte (1 samples, 0.02%)</title><rect x="98.4964%" y="69" width="0.0200%" height="15" fill="rgb(235,124,12)" fg:x="4913" fg:w="1"/><text x="98.7464%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`read (1 samples, 0.02%)</title><rect x="98.4964%" y="53" width="0.0200%" height="15" fill="rgb(224,169,11)" fg:x="4913" fg:w="1"/><text x="98.7464%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.02%)</title><rect x="98.6167%" y="69" width="0.0200%" height="15" fill="rgb(250,166,2)" fg:x="4919" fg:w="1"/><text x="98.8667%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.02%)</title><rect x="98.6167%" y="53" width="0.0200%" height="15" fill="rgb(242,216,29)" fg:x="4919" fg:w="1"/><text x="98.8667%" y="63.50"></text></g><g><title>rust_ruleengine`alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (10 samples, 0.20%)</title><rect x="98.5164%" y="85" width="0.2005%" height="15" fill="rgb(230,116,27)" fg:x="4914" fg:w="10"/><text x="98.7664%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (4 samples, 0.08%)</title><rect x="98.6367%" y="69" width="0.0802%" height="15" fill="rgb(228,99,48)" fg:x="4920" fg:w="4"/><text x="98.8867%" y="79.50"></text></g><g><title>rust_ruleengine`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (2 samples, 0.04%)</title><rect x="98.7169%" y="85" width="0.0401%" height="15" fill="rgb(253,11,6)" fg:x="4924" fg:w="2"/><text x="98.9669%" y="95.50"></text></g><g><title>rust_ruleengine`serde::de::impls::_&lt;impl serde::de::Deserialize for alloc::string::String&gt;::deserialize (10 samples, 0.20%)</title><rect x="98.7570%" y="85" width="0.2005%" height="15" fill="rgb(247,143,39)" fg:x="4926" fg:w="10"/><text x="99.0070%" y="95.50"></text></g><g><title>rust_ruleengine`&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (10 samples, 0.20%)</title><rect x="98.7570%" y="69" width="0.2005%" height="15" fill="rgb(236,97,10)" fg:x="4926" fg:w="10"/><text x="99.0070%" y="79.50"></text></g><g><title>rust_ruleengine`core::str::converts::from_utf8 (3 samples, 0.06%)</title><rect x="98.8974%" y="53" width="0.0601%" height="15" fill="rgb(233,208,19)" fg:x="4933" fg:w="3"/><text x="99.1474%" y="63.50"></text></g><g><title>rust_ruleengine`&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (80 samples, 1.60%)</title><rect x="97.3737%" y="101" width="1.6038%" height="15" fill="rgb(216,164,2)" fg:x="4857" fg:w="80"/><text x="97.6237%" y="111.50"></text></g><g><title>rust_ruleengine`serde_json::de::Deserializer&lt;R&gt;::parse_object_colon (1 samples, 0.02%)</title><rect x="98.9575%" y="85" width="0.0200%" height="15" fill="rgb(220,129,5)" fg:x="4936" fg:w="1"/><text x="99.2075%" y="95.50"></text></g><g><title>rust_ruleengine`std::io::uninlined_slow_read_byte (1 samples, 0.02%)</title><rect x="98.9575%" y="69" width="0.0200%" height="15" fill="rgb(242,17,10)" fg:x="4936" fg:w="1"/><text x="99.2075%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`read (1 samples, 0.02%)</title><rect x="98.9575%" y="53" width="0.0200%" height="15" fill="rgb(242,107,0)" fg:x="4936" fg:w="1"/><text x="99.2075%" y="63.50"></text></g><g><title>rust_ruleengine`&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (85 samples, 1.70%)</title><rect x="97.2935%" y="117" width="1.7041%" height="15" fill="rgb(251,28,31)" fg:x="4853" fg:w="85"/><text x="97.5435%" y="127.50"></text></g><g><title>rust_ruleengine`alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.02%)</title><rect x="98.9775%" y="101" width="0.0200%" height="15" fill="rgb(233,223,10)" fg:x="4937" fg:w="1"/><text x="99.2275%" y="111.50"></text></g><g><title>rust_ruleengine`&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed::has_next_element (1 samples, 0.02%)</title><rect x="98.9976%" y="117" width="0.0200%" height="15" fill="rgb(215,21,27)" fg:x="4938" fg:w="1"/><text x="99.2476%" y="127.50"></text></g><g><title>rust_ruleengine`core::str::converts::from_utf8 (3 samples, 0.06%)</title><rect x="99.3184%" y="101" width="0.0601%" height="15" fill="rgb(232,23,21)" fg:x="4954" fg:w="3"/><text x="99.5684%" y="111.50"></text></g><g><title>rust_ruleengine`&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (19 samples, 0.38%)</title><rect x="99.0176%" y="117" width="0.3809%" height="15" fill="rgb(244,5,23)" fg:x="4939" fg:w="19"/><text x="99.2676%" y="127.50"></text></g><g><title>rust_ruleengine`std::io::uninlined_slow_read_byte (1 samples, 0.02%)</title><rect x="99.3785%" y="101" width="0.0200%" height="15" fill="rgb(226,81,46)" fg:x="4957" fg:w="1"/><text x="99.6285%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`read (1 samples, 0.02%)</title><rect x="99.3785%" y="85" width="0.0200%" height="15" fill="rgb(247,70,30)" fg:x="4957" fg:w="1"/><text x="99.6285%" y="95.50"></text></g><g><title>rust_ruleengine`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.02%)</title><rect x="99.3986%" y="117" width="0.0200%" height="15" fill="rgb(212,68,19)" fg:x="4958" fg:w="1"/><text x="99.6486%" y="127.50"></text></g><g><title>rust_ruleengine`alloc::raw_vec::finish_grow (1 samples, 0.02%)</title><rect x="99.3986%" y="101" width="0.0200%" height="15" fill="rgb(240,187,13)" fg:x="4958" fg:w="1"/><text x="99.6486%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (1 samples, 0.02%)</title><rect x="99.3986%" y="85" width="0.0200%" height="15" fill="rgb(223,113,26)" fg:x="4958" fg:w="1"/><text x="99.6486%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (1 samples, 0.02%)</title><rect x="99.3986%" y="69" width="0.0200%" height="15" fill="rgb(206,192,2)" fg:x="4958" fg:w="1"/><text x="99.6486%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.02%)</title><rect x="99.3986%" y="53" width="0.0200%" height="15" fill="rgb(241,108,4)" fg:x="4958" fg:w="1"/><text x="99.6486%" y="63.50"></text></g><g><title>rust_ruleengine`&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (112 samples, 2.25%)</title><rect x="97.1933%" y="133" width="2.2454%" height="15" fill="rgb(247,173,49)" fg:x="4848" fg:w="112"/><text x="97.4433%" y="143.50">r..</text></g><g><title>rust_ruleengine`serde_json::de::Deserializer&lt;R&gt;::parse_integer (1 samples, 0.02%)</title><rect x="99.4186%" y="117" width="0.0200%" height="15" fill="rgb(224,114,35)" fg:x="4959" fg:w="1"/><text x="99.6686%" y="127.50"></text></g><g><title>rust_ruleengine`&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed::has_next_key (3 samples, 0.06%)</title><rect x="99.4387%" y="133" width="0.0601%" height="15" fill="rgb(245,159,27)" fg:x="4960" fg:w="3"/><text x="99.6887%" y="143.50"></text></g><g><title>rust_ruleengine`DYLD-STUB$$memcmp (2 samples, 0.04%)</title><rect x="99.4988%" y="133" width="0.0401%" height="15" fill="rgb(245,172,44)" fg:x="4963" fg:w="2"/><text x="99.7488%" y="143.50"></text></g><g><title>rust_ruleengine`DYLD-STUB$$memcpy (1 samples, 0.02%)</title><rect x="99.5389%" y="133" width="0.0200%" height="15" fill="rgb(236,23,11)" fg:x="4965" fg:w="1"/><text x="99.7889%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.02%)</title><rect x="99.6391%" y="117" width="0.0200%" height="15" fill="rgb(205,117,38)" fg:x="4970" fg:w="1"/><text x="99.8891%" y="127.50"></text></g><g><title>rust_ruleengine`alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (9 samples, 0.18%)</title><rect x="99.5589%" y="133" width="0.1804%" height="15" fill="rgb(237,72,25)" fg:x="4966" fg:w="9"/><text x="99.8089%" y="143.50"></text></g><g><title>rust_ruleengine`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (4 samples, 0.08%)</title><rect x="99.6592%" y="117" width="0.0802%" height="15" fill="rgb(244,70,9)" fg:x="4971" fg:w="4"/><text x="99.9092%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.02%)</title><rect x="99.7193%" y="101" width="0.0200%" height="15" fill="rgb(217,125,39)" fg:x="4974" fg:w="1"/><text x="99.9693%" y="111.50"></text></g><g><title>rust_ruleengine`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.02%)</title><rect x="99.7394%" y="133" width="0.0200%" height="15" fill="rgb(235,36,10)" fg:x="4975" fg:w="1"/><text x="99.9894%" y="143.50"></text></g><g><title>rust_ruleengine`core::str::converts::from_utf8 (2 samples, 0.04%)</title><rect x="99.8998%" y="101" width="0.0401%" height="15" fill="rgb(251,123,47)" fg:x="4983" fg:w="2"/><text x="100.1498%" y="111.50"></text></g><g><title>rust_ruleengine`&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (146 samples, 2.93%)</title><rect x="97.0329%" y="149" width="2.9270%" height="15" fill="rgb(221,13,13)" fg:x="4840" fg:w="146"/><text x="97.2829%" y="159.50">ru..</text></g><g><title>rust_ruleengine`serde::de::impls::_&lt;impl serde::de::Deserialize for alloc::string::String&gt;::deserialize (10 samples, 0.20%)</title><rect x="99.7594%" y="133" width="0.2005%" height="15" fill="rgb(238,131,9)" fg:x="4976" fg:w="10"/><text x="100.0094%" y="143.50"></text></g><g><title>rust_ruleengine`&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::parse_str (10 samples, 0.20%)</title><rect x="99.7594%" y="117" width="0.2005%" height="15" fill="rgb(211,50,8)" fg:x="4976" fg:w="10"/><text x="100.0094%" y="127.50"></text></g><g><title>rust_ruleengine`std::io::uninlined_slow_read_byte (1 samples, 0.02%)</title><rect x="99.9399%" y="101" width="0.0200%" height="15" fill="rgb(245,182,24)" fg:x="4985" fg:w="1"/><text x="100.1899%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`read (1 samples, 0.02%)</title><rect x="99.9399%" y="85" width="0.0200%" height="15" fill="rgb(242,14,37)" fg:x="4985" fg:w="1"/><text x="100.1899%" y="95.50"></text></g><g><title>dyld`start (4,987 samples, 99.98%)</title><rect x="0.0000%" y="309" width="99.9800%" height="15" fill="rgb(246,228,12)" fg:x="0" fg:w="4987"/><text x="0.2500%" y="319.50">dyld`start</text></g><g><title>rust_ruleengine`main (4,987 samples, 99.98%)</title><rect x="0.0000%" y="293" width="99.9800%" height="15" fill="rgb(213,55,15)" fg:x="0" fg:w="4987"/><text x="0.2500%" y="303.50">rust_ruleengine`main</text></g><g><title>rust_ruleengine`std::rt::lang_start_internal (4,987 samples, 99.98%)</title><rect x="0.0000%" y="277" width="99.9800%" height="15" fill="rgb(209,9,3)" fg:x="0" fg:w="4987"/><text x="0.2500%" y="287.50">rust_ruleengine`std::rt::lang_start_internal</text></g><g><title>rust_ruleengine`std::rt::lang_start::_{{closure}} (4,987 samples, 99.98%)</title><rect x="0.0000%" y="261" width="99.9800%" height="15" fill="rgb(230,59,30)" fg:x="0" fg:w="4987"/><text x="0.2500%" y="271.50">rust_ruleengine`std::rt::lang_start::_{{closure}}</text></g><g><title>rust_ruleengine`std::sys::backtrace::__rust_begin_short_backtrace (4,987 samples, 99.98%)</title><rect x="0.0000%" y="245" width="99.9800%" height="15" fill="rgb(209,121,21)" fg:x="0" fg:w="4987"/><text x="0.2500%" y="255.50">rust_ruleengine`std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>rust_ruleengine`rust_ruleengine::main (4,986 samples, 99.96%)</title><rect x="0.0200%" y="229" width="99.9599%" height="15" fill="rgb(220,109,13)" fg:x="1" fg:w="4986"/><text x="0.2700%" y="239.50">rust_ruleengine`rust_ruleengine::main</text></g><g><title>rust_ruleengine`rust_ruleengine::utils::read_json::read_json_file_streaming (148 samples, 2.97%)</title><rect x="97.0128%" y="213" width="2.9671%" height="15" fill="rgb(232,18,1)" fg:x="4839" fg:w="148"/><text x="97.2628%" y="223.50">rus..</text></g><g><title>rust_ruleengine`&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_seq (148 samples, 2.97%)</title><rect x="97.0128%" y="197" width="2.9671%" height="15" fill="rgb(215,41,42)" fg:x="4839" fg:w="148"/><text x="97.2628%" y="207.50">rus..</text></g><g><title>rust_ruleengine`&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (148 samples, 2.97%)</title><rect x="97.0128%" y="181" width="2.9671%" height="15" fill="rgb(224,123,36)" fg:x="4839" fg:w="148"/><text x="97.2628%" y="191.50">rus..</text></g><g><title>rust_ruleengine`&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (148 samples, 2.97%)</title><rect x="97.0128%" y="165" width="2.9671%" height="15" fill="rgb(240,125,3)" fg:x="4839" fg:w="148"/><text x="97.2628%" y="175.50">rus..</text></g><g><title>rust_ruleengine`alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.02%)</title><rect x="99.9599%" y="149" width="0.0200%" height="15" fill="rgb(205,98,50)" fg:x="4986" fg:w="1"/><text x="100.2099%" y="159.50"></text></g><g><title>all (4,988 samples, 100%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(205,185,37)" fg:x="0" fg:w="4988"/><text x="0.2500%" y="335.50"></text></g><g><title>libsystem_kernel.dylib`__exit (1 samples, 0.02%)</title><rect x="99.9800%" y="309" width="0.0200%" height="15" fill="rgb(238,207,15)" fg:x="4987" fg:w="1"/><text x="100.2300%" y="319.50"></text></g></svg></svg>